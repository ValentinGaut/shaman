"""Contains the integration tests for the server_tools module.
Requires:
    - RHEL 7.0
    - Slurm
"""

import unittest
import os
import subprocess
import time
from iomodules_handler.tools.server_tools import check_slurm_queue_name, check_rpm_installed

CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))
WORKING_DIR = os.getcwd()
TEST_DATA = os.path.join(CURRENT_DIR, "test_data")


class TestServerTools(unittest.TestCase):
    """Tests that the server tools work properly."""

    def test_slurm_queue(self):
        """Tests that checking the slurm queue works properly
         when submitting a sbatch performing sleep."""
        # Submit sbatch
        subprocess.run(f"sbatch {os.path.join(TEST_DATA, 'sleep_sbatch.sbatch')}".split())
        # Check the slurm queue (wait 20 seconds as slurm can be slow)
        start = time.time()
        end = 0
        in_queue = False
        while (end - start) < 20:
            end = time.time()
            in_queue = check_slurm_queue_name("TestJob")
        self.assertTrue(in_queue, "Sbatch job was not detected as running.")
        
    def test_slurm_queue_not_running(self):
        """Tests that checking the slurm queue works properly
        when looking for a sbatch that has not been submited."""
        # Submit sbatch
        subprocess.run(f"sbatch {os.path.join(TEST_DATA, 'sleep_sbatch.sbatch')}".split())
        # Check the slurm queue
        self.assertFalse(check_slurm_queue_name("Idontexist!"), 
                         "Sbatch job was not detected as running.")

    def test_rpm_installed(self):
        """Tests that when looking for a rpm that is installed, the function
        check_rpm_installed returns True"""
        self.assertTrue(check_rpm_installed("openssh"))

    def test_rpm_not_installed(self):
        """Tests that when a rpm is not installed, the fuction check_rpm_installed
        returns False"""
        self.assertFalse(check_rpm_installed("tutu"))

    def tearDown(self):
        """
        Remove slurm outputs generated by running the sbatch.
        """
        # Clean up the slurms in current and working dir
        current_dir = os.listdir(CURRENT_DIR)
        for file_ in current_dir:
            if file_.endswith(".out"):
                os.remove(os.path.join(CURRENT_DIR, file_))
        working_dir = os.listdir(WORKING_DIR)
        for file_ in working_dir:
            if file_.endswith(".out"):
                os.remove(os.path.join(WORKING_DIR, file_))


if __name__ == '__main__':
    # Run the unittests
    unittest.main()

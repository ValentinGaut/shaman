"""Integration tests that the SROAccelerator class behaves as expected.
They require:
    - RHEL 7
    - Slurm
    - The Bull fastio libraries version >= 1.1
"""
import os
import unittest

from iomodules_handler.io_modules import SROAccelerator


CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))
WORKING_DIR = os.getcwd()
TEST_DATA_INTEGRATION = os.path.join(CURRENT_DIR, "test_data")
TEST_CONFIGURATION = os.path.join(TEST_DATA_INTEGRATION, "iomodules_config.yaml")

# Save current environment variable into a variable
current_var_env = os.environ.copy()

default_parameters = {"SLURM_CONF": "/slurm/slurm.conf",
                      "SRO_SEQUENCE_LENGTH": "100",
                      "SRO_DSC_BINSIZE": "1048576",
                      "SRO_CLUSTER_THRESHOLD": "2",
                      "SRO_PREFETCH_SIZE": "20971520"}
parameters_full = {"SLURM_CONF": "/slurm/slurm.conf",
                   "SRO_SEQUENCE_LENGTH": "151",
                   "SRO_DSC_BINSIZE": "1048578",
                   "SRO_CLUSTER_THRESHOLD": "5",
                   "SRO_PREFETCH_SIZE": "20971525"}
parameters_partial = {"SLURM_CONF": "/slurm/slurm.conf",
                      "SRO_SEQUENCE_LENGTH": "100",
                      "SRO_DSC_BINSIZE": "1048576"}



class IntTestSROAccelerator(unittest.TestCase):
    """Tests that the SROAccelerator class works properly."""

    def test_class_initialization_default(self):
        """Tests that the class initializes properly using default parameters."""
        acc = SROAccelerator(module_configuration=TEST_CONFIGURATION)
        acc.setup()
        acc.setup_var_env()
        expected_parameters = default_parameters
        expected_parameters.update(current_var_env)
        self.assertDictEqual(acc.var_env, expected_parameters)

    def test_class_initialization_parameters(self):
        """Tests that the class initializes properly using full parameters."""
        acc = SROAccelerator(parameters_full, TEST_CONFIGURATION)
        acc.setup()
        expected_parameters = parameters_full
        expected_parameters.update(current_var_env)
        self.assertDictEqual(acc.var_env, expected_parameters)

    def test_class_initialization_partial_parameters(self):
        """Tests that when using only partial parameters the class initializes properly."""
        acc = SROAccelerator(parameters_partial, TEST_CONFIGURATION)
        acc.setup()
        expected_parameters = default_parameters
        expected_parameters.update(current_var_env)
        self.assertDictEqual(acc.var_env, expected_parameters)

    def test_submit_sbatch(self):
        """Tests that when the submit_sbatch method is called with this accelerator,
        it is properly enabled."""
        acc = SROAccelerator(module_configuration=TEST_CONFIGURATION)
        stderr, stdout = acc.submit_sbatch(f"{os.path.join(TEST_DATA_INTEGRATION, 'sleep_sbatch.sbatch')}", 
                                           verbose=True)
        in_stderr = "Bull Fast IO Libraries" in stderr
        in_stdout = "Bull Fast IO Libraries" in stdout
        self.assertTrue(in_stderr or in_stdout, "Fast IO Libraries were not enabled"
                        "when submitting the sbatch")

    def tearDown(self):
        """
        Remove slurm outputs generated by running the sbatch.
        """
        # Clean up the slurms in current and working dir
        current_dir = os.listdir(CURRENT_DIR)
        for file_ in current_dir:
            if file_.endswith(".out"):
                os.remove(os.path.join(CURRENT_DIR, file_))
        working_dir = os.listdir(WORKING_DIR)
        for file_ in working_dir:
            if file_.endswith(".out"):
                os.remove(os.path.join(WORKING_DIR, file_))


if __name__ == '__main__':
    unittest.main()

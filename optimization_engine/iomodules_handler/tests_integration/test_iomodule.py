"""
Contains integration tests for IOModule class.
These require a machine:
    - Running RHEL 7
    - Having slurm installed
"""

import unittest
import os
import time
from iomodules_handler.io_modules.iomodule import IOModule
from iomodules_handler.tools.server_tools import check_slurm_queue_id

CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))
WORKING_DIR = os.getcwd()
TEST_DATA_INTEGRATION = os.path.join(CURRENT_DIR, "test_data")
TEST_DATA = os.path.join(CURRENT_DIR, "../tests/test_data")


class IntTestIOModule(unittest.TestCase):
    """Tests that the IOModule class works properly."""

    def test_submit_sbatch(self):
        """Tests that the sbatch is properly submitted using the IOModule."""
        io_module = IOModule(f"{TEST_DATA}/test_configuration.yaml")
        job_id = io_module.submit_sbatch(f"{TEST_DATA_INTEGRATION}/sbatch_test_iomodule.sbatch", wait=False)
        self.assertTrue(check_slurm_queue_id(job_id))

    def test_submit_sbatch_header(self):
        """Tests that the sbatch is properly submitted using the IOModule when it possess a header."""
        io_module = IOModule(f"{TEST_DATA}/test_configuration.yaml")
        io_module.header = "ld_preload=ld_preload"
        job_id = io_module.submit_sbatch(f"{TEST_DATA_INTEGRATION}/sbatch_test_iomodule.sbatch", wait=False)
        self.assertTrue(check_slurm_queue_id(job_id))

    def test_submit_sbatch_wait(self):
        """Tests that the sbatch is properly submitted and that Python waits for the end
        before relaxing the process.
        This is tested by making sure that this test makes more than 30 seconds to run.
        """
        test_start = time.time()
        io_module = IOModule(f"{TEST_DATA}/test_configuration.yaml")
        io_module.submit_sbatch(f"{TEST_DATA_INTEGRATION}/sbatch_test_iomodule.sbatch", wait=True)
        test_stop = time.time()
        self.assertTrue(test_stop - test_start >= 30)

    def test_submit_sbatch_failed(self):
        """Tests that an exception error is raised when the job can't be launched because 
        of a malformed sbatch."""
        with self.assertRaises(Exception):
            io_module = IOModule(f"{TEST_DATA}/test_configuration.yaml")
            io_module.submit_sbatch(f"{TEST_DATA_INTEGRATION}/failing_sbatch.tutu", wait=False)

    def tearDown(self):
        """
        Remove slurm outputs generated by running the sbatch.
        """
        # Clean up the slurms in current and working dir
        current_dir = os.listdir(CURRENT_DIR)
        for file_ in current_dir:
            if file_.endswith(".out"):
                os.remove(os.path.join(CURRENT_DIR, file_))
        working_dir = os.listdir(WORKING_DIR)
        for file_ in working_dir:
            if file_.endswith(".out"):
                os.remove(os.path.join(WORKING_DIR, file_))


if __name__ == '__main__':
    unittest.main()
